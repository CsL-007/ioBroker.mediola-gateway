{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\nimport * as utils from \"@iobroker/adapter-core\";\nimport axios from \"axios\";\nimport * as dgram from \"dgram\";\nconst inSocket = dgram.createSocket(\"udp4\");\nconst outSocket = dgram.createSocket(\"udp4\");\nlet waitingForAnyDevice = false;\nlet waitingForMacDevice = false;\nlet waitingForIpDevice = false;\nlet foundMacAddress = \"\";\nlet foundIpAddress = \"\";\nlet validMediolaFound = false;\nlet sysvarInit = false;\n\n// links of interest:\n// https://github.com/ioBroker/AdapterRequests/issues/47 (main adapter request)\n// https://github.com/ioBroker/AdapterRequests/issues/492 (868MHz request)\n// https://github.com/ioBroker/AdapterRequests/issues/60\n\ntype MediolaEvt = { type: string; data: string };\nfunction isMediolaEvt(o: any): o is MediolaEvt {\n    return \"type\" in o && \"data\" in o;\n}\ntype MediolaSysVarArray = [{ type: string; adr: string; state: string }];\nfunction isMediolaSysVarArray(o: any): o is MediolaSysVarArray {\n    return true;\n}\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass MediolaGateway extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"mediola-gateway\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n    /**\n     * Is called when valid mediola found\n     * read all existing SysVars\n     */\n    private async readAllSystemVars(): Promise<void> {\n        if (validMediolaFound && !sysvarInit) {\n            sysvarInit = true;\n            let reqUrl = \"http://\" + foundIpAddress + \"/command?XC_FNC=getstates\";\n            reqUrl = encodeURI(reqUrl);\n            this.log.debug(\"url request to mediola: \" + reqUrl);\n            axios\n                .get(reqUrl)\n                .then((res) => {\n                    this.log.debug(res.data);\n                    if (res.data.startsWith(\"{XC_SUC}\")) {\n                        this.log.debug(\"mediola device found data: \" + res.data);\n                        try {\n                            const jsonData = JSON.parse(res.data.substring(8));\n                            if (isMediolaSysVarArray(jsonData)) {\n                                if (jsonData.length > 0) {\n                                    for (let index = 0; index < jsonData.length; index++) {\n                                        const element = jsonData[index];\n                                        this.log.debug(JSON.stringify(element));\n                                        this.setObjectNotExists(\"id\" + element.adr, {\n                                            type: \"state\",\n                                            common: {\n                                                name: \"sysvar\" + element.adr,\n                                                type: \"string\",\n                                                role: \"text\",\n                                                read: true,\n                                                write: false,\n                                            },\n                                            native: {},\n                                        });\n                                        this.setState(\"id\" + element.adr, { val: element.state, ack: true });\n                                    }\n                                }\n                            } else {\n                                this.log.error(\"json format not known:\" + res.data.substring(8));\n                            }\n                        } catch (error) {\n                            this.log.error(\"json format invalid:\" + res.data.substring(8));\n                        }\n                    } else {\n                        this.log.error(\"mediola device rejected the request: \" + res.data);\n                    }\n                })\n                .catch((error) => {\n                    this.log.debug(error);\n                });\n        }\n    }\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Reset the connection indicator during startup\n        this.setState(\"info.connection\", false, true);\n\n        // try to find the mediola gateway with the given config\n        this.log.info(\"auto detection: \" + this.config.autoDetect);\n        if (this.config.autoDetect == false) {\n            this.log.info(\"find by mac: \" + this.config.findByMac);\n            if (this.config.findByMac == true) {\n                waitingForMacDevice = true;\n                foundMacAddress = this.config.mac;\n                this.log.info(\"with mac address: \" + foundMacAddress);\n            } else {\n                this.log.info(\"find by ip: \" + this.config.findByIp);\n                if (this.config.findByIp == true) {\n                    waitingForIpDevice = true;\n                    foundIpAddress = this.config.ip;\n                    this.log.info(\"with ip: \" + foundIpAddress);\n                } else {\n                    this.log.error(\"no valid detection method defined\");\n                }\n            }\n        } else {\n            waitingForAnyDevice = true;\n        }\n        inSocket.on(\"listening\", () => {\n            const address = inSocket.address();\n            this.log.debug(`UDP socket listening on ${address.address}:${address.port}`);\n        });\n        inSocket.on(\"message\", (message, remote) => {\n            if (message.toString().startsWith(\"{XC_EVT}\")) {\n                const eventData = message.toString().substring(8);\n                try {\n                    const jsonData = JSON.parse(eventData);\n                    if (isMediolaEvt(jsonData)) {\n                        if (jsonData.type === \"IR\") {\n                            this.setState(\"receivedIrData\", { val: jsonData.data, ack: true });\n                        } else if (jsonData.type === \"SV\") {\n                            this.log.debug(JSON.stringify(jsonData));\n                            const data = jsonData.data;\n                            const index = data.substring(2, 4);\n                            const value = data.substring(5);\n                            if (data.startsWith(\"I:\")) {\n                                this.setState(\"id\" + index, { val: value, ack: true });\n                            } else if (data.startsWith(\"B:\")) {\n                                this.setState(\"id\" + index, { val: value, ack: true });\n                            } else if (data.startsWith(\"S:\")) {\n                                this.setState(\"id\" + index, { val: value, ack: true });\n                            } else if (data.startsWith(\"F:\")) {\n                                // never reached yet, because invalid json chars in floats\n                                this.setState(\"id\" + index, { val: value, ack: true });\n                            } else {\n                                this.log.debug(\"data type not known\");\n                            }\n                        }\n                    } else {\n                        this.log.error(\"json format not known:\" + message);\n                    }\n                } catch (error) {\n                    this.log.error(\"json format invalid:\" + message);\n                }\n            } else {\n                this.log.debug(`in RECEIVED unknow message: ${remote.address}:${remote.port}-${message}|end`);\n            }\n        });\n        inSocket.bind(1902);\n        outSocket.bind(() => {\n            outSocket.setBroadcast(true);\n            outSocket.on(\"message\", (message, remote) => {\n                this.log.debug(`out RECEIVED: ${remote.address}:${remote.port} - ${message}|end`);\n                const dataLines = String(message).split(\"\\n\");\n                let ipAddress = \"\";\n                let macAddress = \"\";\n                let mediolaFound = false;\n                for (const dataLine of dataLines) {\n                    if (dataLine.startsWith(\"IP:\")) {\n                        ipAddress = dataLine.substring(3);\n                    }\n                    if (dataLine.startsWith(\"MAC:\")) {\n                        macAddress = dataLine.substring(4);\n                        // possible command to set the DNS of the gateway\n                        // outSocket.send(\n                        //     'SET:' + macAddress + '\\n' +\n                        //     'AUTH:' + password + '\\n' +\n                        //     'DNS:192.168.54.99\\n'\n                        //     , 1901, '255.255.255.255', (err) => {\n                        //         this.log.error(`err send pwd: ${err}`);\n                        // });\n                    }\n                    if (dataLine.startsWith(\"NAME:AIO GATEWAY\")) {\n                        mediolaFound = true;\n                    }\n                }\n                if (mediolaFound) {\n                    if (waitingForAnyDevice === true) {\n                        waitingForAnyDevice = false;\n                        foundMacAddress = macAddress;\n                        foundIpAddress = ipAddress;\n                        this.setState(\"info.connection\", true, true);\n                        this.log.info(`Mediola connected with ip:${ipAddress} and mac:${macAddress}`);\n                        validMediolaFound = true;\n                    }\n                    if (waitingForMacDevice === true) {\n                        if (foundMacAddress === macAddress) {\n                            waitingForMacDevice = false;\n                            foundIpAddress = ipAddress;\n                            this.setState(\"info.connection\", true, true);\n                            this.log.info(`Mediola connected with ip:${ipAddress} and mac:${macAddress}`);\n                            validMediolaFound = true;\n                        }\n                    }\n                    if (waitingForIpDevice === true) {\n                        if (foundIpAddress === ipAddress) {\n                            waitingForIpDevice = false;\n                            foundMacAddress = macAddress;\n                            this.setState(\"info.connection\", true, true);\n                            this.log.info(`Mediola connected with ip:${ipAddress} and mac:${macAddress}`);\n                            validMediolaFound = true;\n                        }\n                    }\n                    if (validMediolaFound === true) {\n                        this.readAllSystemVars();\n                    }\n                } else {\n                    this.log.error(\"unkown device on this port\");\n                }\n            });\n        });\n        outSocket.send(\"GET\\n\", 1901, \"255.255.255.255\", (err) => {\n            console.log(\"err send: \" + err);\n        });\n        // setup the connectors\n        await this.setObjectNotExistsAsync(\"receivedIrData\", {\n            type: \"state\",\n            common: {\n                name: \"receivedIrData\",\n                type: \"string\",\n                role: \"text\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync(\"sendIrData\", {\n            type: \"state\",\n            common: {\n                name: \"sendIrData\",\n                type: \"string\",\n                role: \"text\",\n                read: true,\n                write: true,\n            },\n            native: {},\n        });\n        this.subscribeStates(\"sendIrData\");\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            inSocket.close();\n            outSocket.close();\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n            if (id.endsWith(\"sendIrData\")) {\n                this.log.debug(\"try send: \" + state.val);\n                if (validMediolaFound) {\n                    let reqUrl = \"http://\" + foundIpAddress + \"/command?XC_FNC=Send2&code=\" + state.val;\n                    reqUrl = encodeURI(reqUrl);\n                    this.log.debug(\"url request to mediola: \" + reqUrl);\n                    axios\n                        .get(reqUrl)\n                        .then((res) => {\n                            this.log.debug(res.data);\n                            if (res.data != \"{XC_SUC}\") {\n                                this.log.error(\"mediola device rejected the command: \" + state.val);\n                            }\n                        })\n                        .catch((error) => {\n                            this.log.debug(error);\n                        });\n                }\n            }\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new MediolaGateway(options);\n} else {\n    // otherwise start the instance directly\n    (() => new MediolaGateway())();\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
