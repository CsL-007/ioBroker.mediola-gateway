{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.3.0\r\n */\r\n\r\nimport * as utils from \"@iobroker/adapter-core\";\r\nimport axios from \"axios\";\r\nimport * as dgram from \"dgram\";\r\nconst inSocket = dgram.createSocket(\"udp4\");\r\nconst outSocket = dgram.createSocket(\"udp4\");\r\nlet waitingForAnyDevice = false;\r\nlet waitingForMacDevice = false;\r\nlet waitingForIpDevice = false;\r\nlet foundMacAddress = \"\";\r\nlet foundIpAddress = \"\";\r\nlet validMediolaFound = false;\r\nlet sysvarInit = false;\r\nlet pullDataTimer: ioBroker.Timeout | null = null;\r\n\r\n// links of interest:\r\n// https://github.com/ioBroker/AdapterRequests/issues/47 (main adapter request)\r\n// https://github.com/ioBroker/AdapterRequests/issues/492 (868MHz request)\r\n// https://github.com/ioBroker/AdapterRequests/issues/60\r\n// https://github.com/ioBroker/AdapterRequests/issues/848 (WIR rolladen request)\r\n\r\ntype MediolaEvt = { type: string; data: string };\r\nfunction isMediolaEvt(o: any): o is MediolaEvt {\r\n    return \"type\" in o && \"data\" in o;\r\n}\r\ntype MediolaSysVarArray = [{ type: string; adr: string; state: string }];\r\nfunction isMediolaSysVarArray(o: any): o is MediolaSysVarArray {\r\n    return true;\r\n}\r\n\r\n// Load your modules here, e.g.:\r\n// import * as fs from \"fs\";\r\n\r\nclass MediolaGateway extends utils.Adapter {\r\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n        super({\r\n            ...options,\r\n            name: \"mediola-gateway\",\r\n        });\r\n        this.on(\"ready\", this.onReady.bind(this));\r\n        this.on(\"stateChange\", this.onStateChange.bind(this));\r\n        this.on(\"unload\", this.onUnload.bind(this));\r\n    }\r\n    /**\r\n     * check for forbidden chars\r\n     */\r\n    private validName(Name: string): boolean {\r\n        const CheckName = Name.replace(this.FORBIDDEN_CHARS, \"_\");\r\n        if (CheckName == Name) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * create URL\r\n     */\r\n    private genURL(): string {\r\n        let retVal = \"\";\r\n        if (this.config.username === \"\") {\r\n            retVal = \"http://\" + foundIpAddress + \"/command?\";\r\n        } else {\r\n            retVal =\r\n                \"http://\" +\r\n                foundIpAddress +\r\n                \"/command?XC_USER=\" +\r\n                this.config.username +\r\n                \"&XC_PASS=\" +\r\n                this.config.password +\r\n                \"&\";\r\n        }\r\n        return retVal;\r\n    }\r\n    /**\r\n     * Is called when valid mediola found\r\n     * read all existing SysVars\r\n     */\r\n    private async readAllSystemVars(timerRead: boolean): Promise<void> {\r\n        this.log.debug(\r\n            \"validMediola: \" + validMediolaFound + \" sysvarInti: \" + sysvarInit + \" timerRead: \" + timerRead,\r\n        );\r\n        if ((validMediolaFound && !sysvarInit) || timerRead) {\r\n            sysvarInit = true;\r\n            let reqUrl = this.genURL() + \"XC_FNC=getstates\";\r\n            reqUrl = encodeURI(reqUrl);\r\n            axios\r\n                .get(reqUrl)\r\n                .then((res) => {\r\n                    this.log.debug(res.data);\r\n                    if (res.data.toString().startsWith(\"{XC_SUC}\")) {\r\n                        this.log.debug(\"mediola device found data: \" + res.data);\r\n                        try {\r\n                            const jsonData = JSON.parse(res.data.substring(8));\r\n                            if (isMediolaSysVarArray(jsonData)) {\r\n                                if (jsonData.length > 0) {\r\n                                    for (let index = 0; index < jsonData.length; index++) {\r\n                                        const element = jsonData[index];\r\n                                        this.log.debug(JSON.stringify(element));\r\n                                        // element.adr is from 01 to ff, no invalid chars possible according specification\r\n                                        // discard element, when not following the naming standart (just for sure)\r\n                                        if (this.validName(element.adr)) {\r\n                                            let objName = \"\";\r\n                                            let description = \"\";\r\n                                            let writable = false;\r\n                                            let objState = \"\";\r\n                                            if (element.type === \"WR\") {\r\n                                                objName = element.type + element.adr;\r\n                                                if (element.adr.length != 8) {\r\n                                                    this.log.error(\"this WR element has not 8 chars: \" + element.adr);\r\n                                                }\r\n                                                description = \"WIR \" + element.adr + \" 1=up, 2=down, 3=stop\";\r\n                                                writable = true;\r\n                                                objState = \"0\";\r\n                                            } else if (element.type === \"BK\") {\r\n                                                objName = element.type + element.adr;\r\n                                                if (element.adr.length != 6) {\r\n                                                    this.log.error(\"this BK element has not 6 chars: \" + element.adr);\r\n                                                }\r\n                                                description = \"Nobily \" + element.adr;\r\n                                                writable = true;\r\n                                                objState = \"0\";\r\n                                            } else {\r\n                                                objName = \"id\" + element.adr;\r\n                                                description = \"sysvar\" + element.adr;\r\n                                                objState = element.state;\r\n                                            }\r\n                                            this.setObjectNotExists(objName, {\r\n                                                type: \"state\",\r\n                                                common: {\r\n                                                    name: description,\r\n                                                    type: \"string\",\r\n                                                    role: \"text\",\r\n                                                    read: true,\r\n                                                    write: writable,\r\n                                                },\r\n                                                native: {},\r\n                                            });\r\n                                            this.setState(objName, { val: objState, ack: true });\r\n                                        } else {\r\n                                            this.log.error(\r\n                                                \"invalid sys var name from mediola device element.adr = \" + element.adr,\r\n                                            );\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                this.log.error(\"json format not known:\" + res.data.substring(8));\r\n                            }\r\n                        } catch (error) {\r\n                            this.log.error(\"json format invalid:\" + res.data.substring(8));\r\n                        }\r\n                    } else {\r\n                        this.log.error(\"mediola device rejected the request: \" + res.data);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    sysvarInit = false; // retry next time\r\n                    this.log.error(\"mediola device not reached by getting sys vars\");\r\n                    this.log.error(error);\r\n                });\r\n        } else {\r\n            this.log.debug(\"recalled with no effect\");\r\n        }\r\n    }\r\n    private async refreshStates(source: string): Promise<void> {\r\n        this.log.debug(\"Source: \" + source);\r\n        // stop timer\r\n        if (pullDataTimer != null) {\r\n            this.log.debug(\"timer cleared by: \" + source);\r\n            this.clearTimeout(pullDataTimer);\r\n        }\r\n        if (this.config.pullData === true) {\r\n            // suppress on init call\r\n            if (source !== \"onReady\") {\r\n                this.readAllSystemVars(true);\r\n            }\r\n            // start timer\r\n            if (validMediolaFound) {\r\n                let pullInterval = this.config.pullDataInterval;\r\n                if (pullInterval < 1) {\r\n                    pullInterval = 1;\r\n                }\r\n                pullDataTimer = this.setTimeout(() => {\r\n                    pullDataTimer = null;\r\n                    this.refreshStates(\"timeout (default)\");\r\n                }, this.config.pullDataInterval * 60000);\r\n            }\r\n        }\r\n    }\r\n    // lern call\r\n    // http://ipaddress/command?XC_FNC=Learn\r\n    // set calls\r\n    // http://ipaddress/command?XC_FNC=setVar&id=01&type=ONOFF&value=off\r\n    // http://ipaddress/command?XC_FNC=setVar&id=01&type=ONOFF&value=on\r\n    // http://ipaddress/command?XC_FNC=setVar&id=02&type=int&value=00000007\r\n    // http://ipaddress/command?XC_FNC=setVar&id=03&type=float&value=31323334\r\n    // http://ipaddress/command?XC_FNC=setVar&id=04&type=string&value=abcdefghij\r\n    // events\r\n    // {XC_EVT}{\"type\":\"SV\",\"data\":\"B:01:off\"}\r\n    // {XC_EVT}{\"type\":\"SV\",\"data\":\"B:01:on\"}\r\n    // {XC_EVT}{\"type\":\"SV\",\"data\":\"I:02:00000007\"}\r\n    // {XC_EVT}{\"type\":\"SV\",\"data\":\"F:03:432\"}\r\n    // {XC_EVT}{\"type\":\"SV\",\"data\":\"S:04:abcdefghij\"}\r\n    // getstates Mediola\r\n    // http://ipaddress/command?XC_FNC=getstates\r\n    // {XC_SUC}[\r\n    //    {\"type\":\"ONOFF\",\"adr\":\"01\",\"state\":\"on\"},\r\n    //    {\"type\":\"INT\",\"adr\":\"02\",\"state\":\"00000007\"},\r\n    //    {\"type\":\"FLOAT\",\"adr\":\"03\",\"state\":\"31323334\"},\r\n    //    {\"type\":\"STRING\",\"adr\":\"04\",\"state\":\"abcdefghij\"}]\r\n    // getstates Nobily\r\n    // {XC_SUC}[\r\n    //    {\"type\":\"BK\",\"sid\":\"01\",\"adr\":\"123456\",\"config\":\"\",\"state\":\"\"}]\r\n    // getstates WIR\r\n    // {XC_SUC}[\r\n    //      {\"type\":\"EVENT\",\"adr\":\"FF\",\"state\":\"0\"},\r\n    //      {\"type\":\"WR\",\"sid\":\"01\",\"adr\":\"xaaaaaax\",\"config\":\"F000050528:1:7340:6B53\",\"state\":\"013300\",\"deviceType\":\"01\"}]\r\n    // /info?at=46b385e0a2d610044569ff7a031324a9\r\n    // {\"XC_SUC\":\r\n    //  {   \"name\":\"WIR-CONNECT V6\",\r\n    //      \"mhv\":\"XN II\",\r\n    //      \"mfv\":\"1.2.10-3896c366\",\r\n    //      \"msv\":\"1.16.0\",\r\n    //      \"hwv\":\"C3\",\r\n    //      \"vid\":\"000A\",\r\n    //      \"mem\":200000,\r\n    //      \"ip\":\"xxx.xxx.xxx.xxx\",\r\n    //      \"sn\":\"xxx.xxx.xxx.xxx\",\r\n    //      \"gw\":\"xxx.xxx.xxx.xxx\",\r\n    //      \"dns\":\"xxx.xxx.xxx.xxx\",\r\n    //      \"mac\":\"40-66-7a-00-86-d4\",\r\n    //      \"ntp\":\"xxx.xxx.xxx.xxx\",\r\n    //      \"start\":1680028537,\r\n    //      \"time\":1689705023,\r\n    //      \"loc\":\"21020D0087\",\r\n    //      \"serial\":\"230400,8N1\",\r\n    //      \"io\":\"AA-E0\",\r\n    //      \"cfg\":\"BF\",\r\n    //      \"server\":\"ccs.wir-elektronik-cloud.de:80\",\r\n    //      \"locked\":false,\r\n    //      \"sid\":\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\r\n    //      \"wifi\":\"HITCS_mobile\",\r\n    //      \"rssi\":-60}}\r\n    // set rollo\r\n    // /cmd?XC_FNC=SendSC&type=WR&data=01xaaaaaax0101&at=46b385e0a2d610044569ff7a031324a9 up\r\n    // /cmd?XC_FNC=SendSC&type=WR&data=01xaaaaaax0102&at=46b385e0a2d610044569ff7a031324a9 down\r\n    // /cmd?XC_FNC=SendSC&type=WR&data=01xaaaaaax0103&at=46b385e0a2d610044569ff7a031324a9 stop\r\n    /**\r\n     * Is called when databases are connected and adapter received configuration.\r\n     */\r\n    private async onReady(): Promise<void> {\r\n        // Reset the connection indicator during startup\r\n        this.setState(\"info.connection\", false, true);\r\n\r\n        // try to find the mediola gateway with the given config\r\n        this.log.info(\"auto detection: \" + this.config.autoDetect);\r\n        if (this.config.autoDetect == false) {\r\n            this.log.info(\"find by mac: \" + this.config.findByMac);\r\n            if (this.config.findByMac == true) {\r\n                waitingForMacDevice = true;\r\n                foundMacAddress = this.config.mac;\r\n                this.log.info(\"with mac address: \" + foundMacAddress);\r\n            } else {\r\n                this.log.info(\"find by ip: \" + this.config.findByIp);\r\n                if (this.config.findByIp == true) {\r\n                    waitingForIpDevice = true;\r\n                    foundIpAddress = this.config.ip;\r\n                    this.log.info(\"with ip: \" + foundIpAddress);\r\n                } else {\r\n                    this.log.error(\"no valid detection method defined\");\r\n                }\r\n            }\r\n        } else {\r\n            waitingForAnyDevice = true;\r\n        }\r\n        inSocket.on(\"listening\", () => {\r\n            const address = inSocket.address();\r\n            this.log.debug(`UDP socket listening on ${address.address}:${address.port}`);\r\n        });\r\n        inSocket.on(\"message\", (message, remote) => {\r\n            if (message.toString().startsWith(\"{XC_EVT}\")) {\r\n                const eventData = message.toString().substring(8);\r\n                try {\r\n                    const jsonData = JSON.parse(eventData);\r\n                    if (isMediolaEvt(jsonData)) {\r\n                        if (jsonData.type === \"IR\") {\r\n                            this.setState(\"receivedIrData\", { val: jsonData.data, ack: true });\r\n                        } else if (jsonData.type === \"SV\") {\r\n                            this.log.debug(JSON.stringify(jsonData));\r\n                            const data = jsonData.data;\r\n                            const index = data.substring(2, 4);\r\n                            const value = data.substring(5);\r\n                            if (data.startsWith(\"I:\")) {\r\n                                this.setState(\"id\" + index, { val: value, ack: true });\r\n                            } else if (data.startsWith(\"B:\")) {\r\n                                this.setState(\"id\" + index, { val: value, ack: true });\r\n                            } else if (data.startsWith(\"S:\")) {\r\n                                this.setState(\"id\" + index, { val: value, ack: true });\r\n                            } else if (data.startsWith(\"F:\")) {\r\n                                // never reached yet, because invalid json chars in floats\r\n                                this.setState(\"id\" + index, { val: value, ack: true });\r\n                            } else {\r\n                                this.log.debug(\"sys var type not known: \" + jsonData.data);\r\n                            }\r\n                        } else if (jsonData.type === \"WR\") {\r\n                            // not yet seen, but should be intresting when received\r\n                            this.log.debug(JSON.stringify(jsonData));\r\n                        } else if (jsonData.type === \"HM\") {\r\n                            // ignor HM data\r\n                        } else {\r\n                            this.log.debug(\"data type not known: \" + jsonData.type);\r\n                            this.log.debug(JSON.stringify(jsonData));\r\n                        }\r\n                    } else {\r\n                        this.log.error(\"json format not known:\" + message);\r\n                    }\r\n                } catch (error) {\r\n                    this.log.error(\"json format invalid:\" + message);\r\n                }\r\n            } else {\r\n                this.log.debug(`in RECEIVED unknow message: ${remote.address}:${remote.port}-${message}|end`);\r\n            }\r\n        });\r\n        inSocket.bind(1902);\r\n        outSocket.bind(() => {\r\n            outSocket.setBroadcast(true);\r\n            outSocket.on(\"message\", (message, remote) => {\r\n                this.log.debug(`out RECEIVED: ${remote.address}:${remote.port} - ${message}|end`);\r\n                const dataLines = String(message).split(\"\\n\");\r\n                let ipAddress = \"\";\r\n                let macAddress = \"\";\r\n                let mediolaFound = false;\r\n                for (const dataLine of dataLines) {\r\n                    this.log.debug(dataLine);\r\n                    if (dataLine.startsWith(\"IP:\")) {\r\n                        ipAddress = dataLine.substring(3);\r\n                    }\r\n                    if (dataLine.startsWith(\"MAC:\")) {\r\n                        macAddress = dataLine.substring(4);\r\n                        // possible command to set the DNS of the gateway\r\n                        // outSocket.send(\r\n                        //     'SET:' + macAddress + '\\n' +\r\n                        //     'AUTH:' + password + '\\n' +\r\n                        //     'DNS:192.168.54.99\\n'\r\n                        //     , 1901, '255.255.255.255', (err) => {\r\n                        //         this.log.error(`err send pwd: ${err}`);\r\n                        // });\r\n                    }\r\n                    if (dataLine.startsWith(\"NAME:AIO GATEWAY\")) {\r\n                        mediolaFound = true;\r\n                    }\r\n                    if (dataLine.startsWith(\"NAME:WIR-CONNECT V6\")) {\r\n                        mediolaFound = true;\r\n                    }\r\n                }\r\n                if (mediolaFound) {\r\n                    if (waitingForAnyDevice === true) {\r\n                        waitingForAnyDevice = false;\r\n                        foundMacAddress = macAddress;\r\n                        foundIpAddress = ipAddress;\r\n                        this.setState(\"info.connection\", true, true);\r\n                        this.log.info(`Mediola connected with ip:${ipAddress} and mac:${macAddress}`);\r\n                        validMediolaFound = true;\r\n                    }\r\n                    if (waitingForMacDevice === true) {\r\n                        if (foundMacAddress === macAddress) {\r\n                            waitingForMacDevice = false;\r\n                            foundIpAddress = ipAddress;\r\n                            this.setState(\"info.connection\", true, true);\r\n                            this.log.info(`Mediola connected with ip:${ipAddress} and mac:${macAddress}`);\r\n                            validMediolaFound = true;\r\n                        }\r\n                    }\r\n                    if (waitingForIpDevice === true) {\r\n                        if (foundIpAddress === ipAddress) {\r\n                            waitingForIpDevice = false;\r\n                            foundMacAddress = macAddress;\r\n                            this.setState(\"info.connection\", true, true);\r\n                            this.log.info(`Mediola connected with ip:${ipAddress} and mac:${macAddress}`);\r\n                            validMediolaFound = true;\r\n                        }\r\n                    }\r\n                    if (validMediolaFound === true) {\r\n                        this.readAllSystemVars(false);\r\n                        this.refreshStates(\"onReady\");\r\n                    }\r\n                } else {\r\n                    this.log.error(\"unkown device on this port\");\r\n                }\r\n            });\r\n        });\r\n        outSocket.send(\"GET\\n\", 1901, \"255.255.255.255\", (err) => {\r\n            console.log(\"err send: \" + err);\r\n        });\r\n        // setup the connectors\r\n        await this.setObjectNotExistsAsync(\"receivedIrData\", {\r\n            type: \"state\",\r\n            common: {\r\n                name: \"receivedIrData\",\r\n                type: \"string\",\r\n                role: \"text\",\r\n                read: true,\r\n                write: false,\r\n            },\r\n            native: {},\r\n        });\r\n        await this.setObjectNotExistsAsync(\"sendIrData\", {\r\n            type: \"state\",\r\n            common: {\r\n                name: \"sendIrData\",\r\n                type: \"string\",\r\n                role: \"text\",\r\n                read: true,\r\n                write: true,\r\n            },\r\n            native: {},\r\n        });\r\n        await this.setObjectNotExistsAsync(\"sendRfData\", {\r\n            type: \"state\",\r\n            common: {\r\n                name: \"sendRfData\",\r\n                type: \"string\",\r\n                role: \"text\",\r\n                read: true,\r\n                write: true,\r\n            },\r\n            native: {},\r\n        });\r\n        this.subscribeStates(\"sendIrData\");\r\n        this.subscribeStates(\"sendRfData\");\r\n        this.subscribeStates(\"id*\");\r\n        this.subscribeStates(\"WR*\");\r\n    }\r\n\r\n    /**\r\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n     */\r\n    private onUnload(callback: () => void): void {\r\n        try {\r\n            inSocket.close();\r\n            outSocket.close();\r\n            callback();\r\n        } catch (e) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is called if a subscribed state changes\r\n     */\r\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n        if (state) {\r\n            // The state was changed\r\n            this.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n            // This is ioBroker convention, only send commands if ack = false\r\n            if (state.ack === false) {\r\n                const dataNameParts = id.split(\".\");\r\n                let dataName = \"\";\r\n                if (dataNameParts.length === 3) {\r\n                    dataName = dataNameParts[2];\r\n                }\r\n                if (dataName === \"sendIrData\") {\r\n                    this.log.debug(\"try send: \" + state.val);\r\n                    if (validMediolaFound) {\r\n                        let reqUrl = this.genURL() + \"XC_FNC=Send2&code=\" + state.val;\r\n                        reqUrl = encodeURI(reqUrl);\r\n                        axios\r\n                            .get(reqUrl)\r\n                            .then((res) => {\r\n                                this.log.debug(res.data);\r\n                                if (res.data.toString().includes(\"XC_SUC\") === false) {\r\n                                    this.log.error(\"mediola device rejected the command: \" + state.val);\r\n                                }\r\n                            })\r\n                            .catch((error) => {\r\n                                this.log.error(\"mediola device not reached by sending IR data\");\r\n                                this.log.error(error);\r\n                            });\r\n                    }\r\n                } else if (dataName === \"sendRfData\") {\r\n                    this.log.debug(\"try send: \" + state.val);\r\n                    if (validMediolaFound) {\r\n                        let reqUrl = this.genURL() + \"XC_FNC=Send2&ir=00&rf=01&code=\" + state.val;\r\n                        reqUrl = encodeURI(reqUrl);\r\n                        axios\r\n                            .get(reqUrl)\r\n                            .then((res) => {\r\n                                this.log.debug(res.data);\r\n                                if (res.data.toString().includes(\"XC_SUC\") === false) {\r\n                                    this.log.error(\"mediola device rejected the command: \" + state.val);\r\n                                }\r\n                            })\r\n                            .catch((error) => {\r\n                                this.log.error(\"mediola device not reached by sending rf data\");\r\n                                this.log.error(error);\r\n                            });\r\n                    }\r\n                } else if (dataName.startsWith(\"id\")) {\r\n                    this.log.debug(\"got known event: \" + id + \" \" + JSON.stringify(state));\r\n                } else if (dataName.startsWith(\"WR\")) {\r\n                    const wrId = dataName.replace(\"WR\", \"\");\r\n                    let direction = \"03\"; // stop\r\n                    if (state.val === \"1\") {\r\n                        direction = \"01\";\r\n                    } else if (state.val == 2) {\r\n                        direction = \"02\";\r\n                    } else if (state.val == 3) {\r\n                        direction = \"03\";\r\n                    } else {\r\n                        this.log.error(\"only 1 (up), 2 (down) or 3 (stop) is allowed. For safety do a stop\");\r\n                    }\r\n                    if (validMediolaFound) {\r\n                        let reqUrl =\r\n                            this.genURL() +\r\n                            \"XC_FNC=SendSC&type=WR&data=01\" +\r\n                            wrId +\r\n                            \"01\" +\r\n                            direction +\r\n                            \"&at=46b385e0a2d610044569ff7a031324a9\";\r\n                        reqUrl = encodeURI(reqUrl);\r\n                        axios\r\n                            .get(reqUrl)\r\n                            .then((res) => {\r\n                                this.log.debug(res.data);\r\n                                if (res.data.toString().includes(\"XC_SUC\") === false) {\r\n                                    this.log.error(\r\n                                        \"mediola device rejectedx the command: \" + state.val + \" response: \" + res.data,\r\n                                    );\r\n                                }\r\n                            })\r\n                            .catch((error) => {\r\n                                this.log.error(\"mediola device not reached by sending SC data\");\r\n                                this.log.error(error);\r\n                            });\r\n                    }\r\n                } else {\r\n                    this.log.debug(\"got unknown event: \" + JSON.stringify(state));\r\n                }\r\n            }\r\n        } else {\r\n            // The state was deleted\r\n            this.log.debug(`state ${id} deleted`);\r\n        }\r\n    }\r\n}\r\n\r\nif (require.main !== module) {\r\n    // Export the constructor in compact mode\r\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new MediolaGateway(options);\r\n} else {\r\n    // otherwise start the instance directly\r\n    (() => new MediolaGateway())();\r\n}\r\n"],
  "mappings": "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",
  "names": ["axios"]
}
